
```{r echo = FALSE, output = FALSE}
  # Quarto can't see the variables from previous chapters [commentary withheld] so we need to run a script that will load the data invisibly	
  source("r/load_data.R")
```

# tmap

[tmap](https://r-tmap.github.io/tmap/) is a popular package for making maps. It uses the concepts of a Grammar of Graphics to layer data as well as visuzalization rules. If you're familiar with the `ggplot2` package, this will feel similar. If you're not familiar with `ggplot2` (or not a fan), that's ok because `tmap` uses layers in much the same way we just built maps using the base R `plot()` function.

## Simple Map

First, we load the libraries we'll need:

```{r echo = TRUE}
	#install.packages("tmap")
  library("tmap")
```

Grammar of Graphics tools typically follow a pattern: first you indicate which data you want to work with, then you indicate the way the data should be styled. Let's map the states data to see a basic no-frills example:

```{r echo = TRUE}
	tm_shape(states) +  #the data we want to map
    tm_polygons()     #style the data using the defaults
```


## Multiple Layers

With `tmap`, if we want to add multiple layers to the map, we can think of each layer as a separate map that we stack together. For our map, we'll first make the layer that contains the states, then we'll add a layer that contains the lakes, then a final layer that contains the monsters.

```{r echo = TRUE}
	map_states <- tm_shape(states) +  
    tm_polygons() 

  map_lakes <- map_states +         #start with the states map
    tm_shape(lakes) +               #add the lakes data
    tm_polygons()                   #style the lakes data
  
  map_monsters <- map_lakes +       #start with the lakes map
    tm_shape(monsters) +            #add the monsters data
    tm_dots()                       #style the monsters data
  
  map_monsters                      #call the map variable to plot the map inside it
```

## Styling

The goal of styling our data is to help it communicate better. Dots on top of state outlines are definitely difficult to understand. Let's change the plotting arguments to make something more readable and to fit the story we want to tell.

```{r echo = TRUE}
	map_states <- tm_shape(states) +  
    tm_polygons(
      fill="white", col="gray30"
    ) 

  map_lakes <- map_states +         
    tm_shape(lakes) +               
    tm_polygons(fill = "lightblue", col="lightblue4")                   
  
  map_monsters <- map_lakes +       
    tm_shape(monsters) +            
    tm_dots()                       
  
  map_monsters                      
```


## Add Text Labels

Let's add some text labels so we know what the names of each of the monsters are. 

## North Arrow & Scale Bar



## Summary

We've seen that 
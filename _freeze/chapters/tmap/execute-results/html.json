{
  "hash": "f76bb33560a01e9bff9f7fb4baacc38a",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.cell}\n\n:::\n\n\n\n\n# tmap\n\n[tmap](https://r-tmap.github.io/tmap/) is a popular package for making maps. It uses the concepts of a Grammar of Graphics to layer data as well as visuzalization rules. If you're familiar with the `ggplot2` package, this will feel similar. If you're not familiar with `ggplot2` (or not a fan), that's ok because `tmap` uses layers in much the same way we just built maps using the base R `plot()` function.\n\n## Simple Map\n\nFirst, we load the libraries we'll need:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\t#install.packages(\"tmap\")\n  library(\"tmap\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'tmap' was built under R version 4.4.3\n```\n\n\n:::\n:::\n\n\n\n\nGrammar of Graphics tools typically follow a pattern: first you indicate which data you want to work with, then you indicate the way the data should be styled. Let's map the states data to see a basic no-frills example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\ttm_shape(states) +  #the data we want to map\n    tm_polygons()     #style the data using the defaults\n```\n\n::: {.cell-output-display}\n![](tmap_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## Multiple Layers\n\n\n\n## Styling\n\nThe goal of styling our data is to help it communicate better. Open circles on top of state outlines are definitely difficult to understand. Let's change the plotting arguments to make something more readable and to fit the story we want to tell.\n\n\n## Add Text Labels\n\nLet's add some text labels so we know what the names of each of the monsters are. \n\n## North Arrow & Scale Bar\n\n\n\n## Summary\n\nWe've seen that ",
    "supporting": [
      "tmap_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
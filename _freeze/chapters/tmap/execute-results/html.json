{
  "hash": "22880df88e014624912980ca56d29201",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.cell}\n\n:::\n\n\n\n\n# tmap\n\n[tmap](https://r-tmap.github.io/tmap/) is a popular package for making maps. It uses the concepts of a Grammar of Graphics to layer data as well as visuzalization rules. If you're familiar with the `ggplot2` package, this will feel similar. If you're not familiar with `ggplot2` (or not a fan), that's ok because `tmap` uses layers in much the same way we just built maps using the base R `plot()` function.\n\n## Simple Map\n\nFirst, we load the libraries we'll need:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\t#install.packages(\"tmap\")\n  library(\"tmap\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'tmap' was built under R version 4.4.3\n```\n\n\n:::\n:::\n\n\n\n\nGrammar of Graphics tools typically follow a pattern: first you indicate which data you want to work with, then you indicate the way the data should be styled. Let's map the states data to see a basic no-frills example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\ttm_shape(states) +  #the data we want to map\n    tm_polygons()     #style the data using the defaults\n```\n\n::: {.cell-output-display}\n![](tmap_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## Multiple Layers\n\nWith `tmap`, if we want to add multiple layers to the map, we can think of each layer as a separate map that we stack together. For our map, we'll first make the layer that contains the states, then we'll add a layer that contains the lakes, then a final layer that contains the monsters.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\tmap_states <- tm_shape(states) +  \n    tm_polygons() \n\n  map_lakes <- map_states +         #start with the states map\n    tm_shape(lakes) +               #add the lakes data\n    tm_polygons()                   #style the lakes data\n  \n  map_monsters <- map_lakes +       #start with the lakes map\n    tm_shape(monsters) +            #add the monsters data\n    tm_dots()                       #style the monsters data\n  \n  map_monsters                      #call the map variable to plot the map inside it\n```\n\n::: {.cell-output-display}\n![](tmap_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n## Styling\n\nThe goal of styling our data is to help it communicate better. Dots on top of state outlines are definitely difficult to understand. Let's change the plotting arguments to make something more readable and to fit the story we want to tell.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\tmap_states <- tm_shape(states) +  \n    tm_polygons(\n      fill=\"white\", col=\"gray30\"\n    ) \n\n  map_lakes <- map_states +         \n    tm_shape(lakes) +               \n    tm_polygons(fill = \"lightblue\", col=\"lightblue4\")                   \n  \n  map_monsters <- map_lakes +       \n    tm_shape(monsters) +            \n    tm_dots()                       \n  \n  map_monsters                      \n```\n\n::: {.cell-output-display}\n![](tmap_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## Add Text Labels\n\nLet's add some text labels so we know what the names of each of the monsters are. \n\n## North Arrow & Scale Bar\n\n\n\n## Summary\n\nWe've seen that ",
    "supporting": [
      "tmap_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
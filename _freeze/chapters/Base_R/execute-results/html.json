{
  "hash": "babe1817f33324f60447292e9dcb3236",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.cell}\n\n:::\n\n\n\n\n# Base R\n\nR comes with tools to create basic graphs like scatter plots. Many spatial data packages extend these tools to work with spatial data, allowing us to use the `plot()` function to visualize spatial data in map form.  This is often a quick and convenient way to visualize your data to check results.\n\nIt seems pretty intuitive, but let's look at what happens if we use the plot command to plot our monsters data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\tplot(monsters)\n```\n\n::: {.cell-output-display}\n![](Base_R_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\nWhoops! What happened? If we don't specify which column in the attribute table to plot, plot() tries to plot all of them sequentially. If you have a large dataset, this can take a while and it's almost never what we actually want.\n\nLet's just plot the shapes without any data. We can do this by specifying that we want to plot the geometry column. In this case, it's called \"geom\".\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\t#plot(monsters$geom)  #this option also works in this situation\n  plot(monsters[\"geom\"])\n```\n\n::: {.cell-output-display}\n![](Base_R_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\nLet's plot them by marker type: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\tplot(monsters[\"marker\"])\n```\n\n::: {.cell-output-display}\n![](Base_R_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Base_R_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
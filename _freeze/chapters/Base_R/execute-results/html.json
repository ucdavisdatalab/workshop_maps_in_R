{
  "hash": "8fae8c67d67cb1eab52ac0bb55fc60fc",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.cell}\n\n:::\n\n\n\n\n# Base R\n\n## Intro to plot()\n\nR comes with tools to create basic graphs like scatter plots. Many spatial data packages extend these tools to work with spatial data, allowing us to use the `plot()` function to visualize spatial data in map form.  This is often a quick and convenient way to visualize your data to check results.\n\nIt seems pretty intuitive, but let's look at what happens if we use the plot command to plot our monsters data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\tplot(monsters)\n```\n\n::: {.cell-output-display}\n![](Base_R_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\nWhoops! What happened? If we don't specify which column in the attribute table to plot, `plot()` tries to plot all of them sequentially. If you have a large dataset, this can take a while and it's almost never what we actually want.\n\nLet's just plot the shapes without any data. We can do this by specifying that we want to plot the geometry column. In this case, it's called \"geom\".\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  plot(st_geometry(monsters))\n```\n\n::: {.cell-output-display}\n![](Base_R_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  #Both of these work, but require you to know the name of the geometry column:\n  #plot(monsters$geom)  \n  #plot(monsters[\"geom\"])\n```\n:::\n\n\n\n\nWe can see the distribution of the data and if you use your imagination, you might be able to make out the general shapes of the continents.\n\nLet's plot them by marker type: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\tplot(monsters[\"marker\"])\n```\n\n::: {.cell-output-display}\n![](Base_R_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\nThat's pretty rough, but it gives us an idea of how the marker (animal forms) are distributed in the dataset.\n\n## Multiple Layers\n\nWe've seen that using `plot()` to visualize a single layer can be a quick way to make sure a data set contains what we think it does, but sometimes we need more context.\n\nYou might have noticed that each time we call the `plot()` function, the previous data we plotted disappears. So how can we show more than one layer on the same plot? `plot()` has an argument called `add` that is boolean (either `TRUE` or `FALSE`) and the default is set to `FALSE`. If we specify `TRUE`, we can add multiple layers to the same plot. It draws the plots in order, so whatever we want to be the lowest layer, we need to plot that first. Let's try plotting the monsters (points) over the states layer (polygons):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  plot(st_geometry(states))\t\n\tplot(st_geometry(monsters), add=TRUE)\n```\n\n::: {.cell-output-display}\n![](Base_R_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nOk! We've got two layers on the same set of axes! Yes, it's hard to read, but we can fix that next.\n\n## Styling\n\nThe goal of styling our data is to help it communicate better. Open circles on top of state outlines are definitely difficult to understand. Let's change the plotting arguments to make something more readable and to fit the story we want to tell.\n\nHow do we know what arguments are available to us?  We can reference the documentation for the sf package's version of plot [here](https://r-spatial.github.io/sf/reference/plot.html) or you can type `?plot` into your RStudio console and pick the sf version of the help for plot in the Help panel.\n\nMost of the plotting arguments will need to be set in the first plot. The arguments in subsequent plots will just style the data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  #create a bounding box object for the zoom area of our map\n  aoi <- st_bbox(c(xmin = -96, xmax = -73, ymax = 50, ymin = 40), crs = st_crs(4326))\n\n\n  plot(\n    st_geometry(states),       #plot the shape of the states\n    col=\"white\",               #fill color for the polygons (states)\n    border=\"gray30\",           #line color for the polygons (states)\n    \n    #xlim=c(-89, -80),         #set the limit of the x axis (longitude)\n    #ylim=c(40, 49),           #set the limit of the y axis (latitude)\n    extent=aoi,                #set the map extent to our AOI bounding box\n    #axes=TRUE,                #makes ticks with lat/long coords... kinda messy\n    bg=\"lightblue3\"            #set the color behind the states (the ocean)\n    )\t\n\n  plot(st_geometry(lakes), \n       col=\"lightblue\",\n       border=\"lightblue4\",\n       lwd=1.5,                 #set line weight\n       add=TRUE)\n\t\n\n  plot(st_geometry(monsters), \n       pch = 19,               #set the points to filled circles\n       cex = 1.5,               #set symbol size\n       add=TRUE)\n```\n\n::: {.cell-output-display}\n![](Base_R_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\nOne thing to notice here is that `plot()` is not adhering strictly to our bounding box. It seems be be padding the area of the map on the east and west sides. If we really need out map to conform to the bounding box, clip the input layers with the bounding box.\n\n\n## Add Text Labels\n\nLet's add some text labels so we know what the names of each of the monsters are. We can keep the same code to make the plots, but we need to add a call to the function `text()` at the end to write the text labels on top of the rest of the map.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  #create a bounding box object for the zoom area of our map\n  aoi <- st_bbox(c(xmin = -89, xmax = -80, ymax = 49, ymin = 40), crs = st_crs(4326))\n\n\n  plot(\n    st_geometry(states),       \n    col=\"white\",               \n    border=\"gray30\",           \n    extent=aoi,                \n    bg=\"lightblue3\"            \n    )\t\n\n  plot(st_geometry(lakes), \n       col=\"lightblue\",\n       border=\"lightblue4\",\n       lwd=1.5,                 \n       add=TRUE)\n\t\n\n  plot(st_geometry(monsters), \n       pch = 19,               \n       cex = 1.5,              \n       add=TRUE)\n  \n  text(monsters,               #locations\n       monsters$Name,          #labels\n       cex = 0.75,             #scale for the characters (text)\n       pos = 1)                #text position: 1=below, 2=left, 3=above, 4=right\n```\n\n::: {.cell-output-display}\n![](Base_R_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\nWe don't have much control over label placement with base `plot()` or the graphic's final dimensions. If you want to edit this with more control, you could export a pdf file and edit it with a vector illustration software like Inkscape or Adobe Illustrator.\n\n## North Arrow & Scale Bar\n\nThe base `plot()` function isn't really designed to make publication-ready maps. Adding a scale bar and north arrow are not really in the scope of this particular work flow so we'll skip that here. However, the map we made probably doesn't need those things if our audience is familiar with the Great Lakes area because they map itself would convey a sense of scale and orientation.\n\n## Summary\nWe've seen that we can create a map quickly using `plot()` that communicates clearly what each layer contains. We have some basic options for controlling the style of the map, but to make a profession-quality map, we probably need a package specifically designed to make maps. We'll cover other map making packages in subsequent sections.",
    "supporting": [
      "Base_R_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}